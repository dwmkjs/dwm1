DECISION TREE:

import java.util.*;
//Aim: To implement Decision Tree algorithm in java
class tree
{
public double hd;
public double p;
char ch;
String parent;
tree(char c,int x)
{
ch=c;
if(x==1)
parent="outlook";
else if(x==2)
parent="temperature";
else if(x==3)
parent="humidity";
else if(x==4)
parent="windy";
}
}
 
class d_tree
{
static char outlook[]={'S','S','O','R','R','R','O','S','S','R','S','O','O','R'};
static char temperature[]={'B','B','B','M','C','C','C','M','C','M','M','M','B','M'};
static char humidity[]={'H','H','H','H','N','N','N','H','N','N','N','H','N','H'};
static char windy[]={'F','T','F','F','F','T','T','F','F','F','T','T','F','T'};
static char class1[]={'N','N','P','P','P','N','P','N','P','P','P','P','P','N'};
static double G1,G2,G3,G4;
static double HD;
static double play=9.0/14.0;
static double nplay=5.0/14.0;
static double temp1,temp2;
static int row=0,column=0;
static char classify[][]=new char[10][10];

static tree cal_hd(tree t,int choice)
{
double count1=0,count2=0;
if(choice==1)
{for(int i=0;i<14;++i)
{if(t.ch==outlook[i] && class1[i]=='P')
++count1;
else
if(t.ch==outlook[i] && class1[i]=='N')
++count2;
}}

if(choice==2)
{for(int i=0;i<14;++i)
{if(t.ch==temperature[i] && class1[i]=='P')
++count1;
else
if(t.ch==temperature[i] && class1[i]=='N')
++count2;
}}

if(choice==3)
{for(int i=0;i<14;++i)
{if(t.ch==humidity[i] && class1[i]=='P')
++count1;
else
if(t.ch==humidity[i] && class1[i]=='N')
++count2;
}}

if(choice==4)
{for(int i=0;i<14;++i)
{if(t.ch==windy[i] && class1[i]=='P')
++count1;
else
if(t.ch==windy[i] && class1[i]=='N')
++count2;
}}

temp1=count1/(count1+count2);
temp2=count2/(count1+count2);
t.p=(count1+count2)/14;

if(temp1==0 || temp2==0)
t.hd=0;
else
t.hd=temp1*(Math.log(1/temp1)/Math.log(10))+temp2*(Math.log(1/temp2)/Math.log(10));

return t;
}

static int check_if_equal(char ca[][],int cnt)
{
int count1=0,count2=0,count3=0;
char c1=ca[0][0],c2=ca[0][1],c3=ca[0][2];

for(int i=0;i<cnt;++i)
{
if(ca[i][0]==c1)
++count1;

if(ca[i][1]==c2)
++count2;

if(ca[i][2]==c3)
++count3;
}

if(count1==cnt)
return 0;
else
if(count2==cnt)
return 1;
else
if(count3==cnt)
return 2;
else
return -1;
}

static void compute(char ch)
{
char ca1[][]=new char[10][10];
char ca2[][]=new char[10][10];
char ca3[][]=new char[10][10];
int cnt1=0;
int cnt2=0;
for(int i=0;i<14;++i)
{
if(outlook[i]==ch)
{
ca1[cnt1][0]=temperature[i];
ca1[cnt1][1]=humidity[i];
ca1[cnt1][2]=windy[i];
ca1[cnt1][3]=class1[i];
++cnt1;
}
}

int check1=0,check2=0;

for(int i=0;i<cnt1;++i)
{
if(ca1[i][3]=='P')
++check1;
else
if(ca1[i][3]=='N')
++check2;
if(check1==cnt1)
{
classify[row][column++]=ch;
classify[row][column++]='P';
System.out.print("--------->PLAY");
return;
}
else
if(check2==cnt1)
{
classify[row][column++]=ch;
classify[row][column++]='N';
System.out.print("--------->NO PLAY");
return;
}
}

//end of for loop

/*System.out.println("The array containing outlook value ch");
for(int i=0;i<9;++i)
{
for(int j=0;j<9;++j)
{
System.out.print(" "+ca1[i][j]);
}
System.out.println();
}
*/



//The array containing outlook value ch and class1=P
cnt1=0;
for(int i=0;i<10;++i)
{
if(ca1[i][3]=='P')
{
ca2[cnt1][0]=ca1[i][0];
ca2[cnt1][1]=ca1[i][1];
ca2[cnt1][2]=ca1[i][2];
ca2[cnt1][3]=ca1[i][3];
++cnt1;
}
}

classify[row][column++]=ch;

int z=check_if_equal(ca2,cnt1);

//System.out.println("The value of Z is "+z);
if(z==0)
{
System.out.print("\n--------->TEMPERATURE("+ca2[0][0]+")--------->PLAY\n");
classify[row][column++]=ca2[0][0];
classify[row][column++]='P';
}
else
if(z==1)
{
System.out.print("\n--------->HUMIDITY("+ca2[0][1]+")--------->PLAY\n");
classify[row][column++]=ca2[0][1];
classify[row][column++]='P';
}
else
if(z==2)
{
System.out.print("\n--------->WINDY("+ca2[0][2]+")--------->PLAY\n");
classify[row][column++]=ca2[0][2];
classify[row][column++]='P';
}

/*
System.out.println("The array containing ch and play");
for(int i=0;i<9;++i)
{
for(int j=0;j<9;++j)
{
System.out.print(" "+ca2[i][j]);
}
System.out.println();
}
*/

//The array containing outlook value ch and class1=N
cnt1=0;
for(int i=0;i<10;++i)
{
if(ca1[i][3]=='N')
{
ca3[cnt1][0]=ca1[i][0];
ca3[cnt1][1]=ca1[i][1];
ca3[cnt1][2]=ca1[i][2];
ca3[cnt1][3]=ca1[i][3];
++cnt1;
}}

++row;
column=0;
classify[row][column++]=ch;
z=check_if_equal(ca3,cnt1);
if(z==0)
{
System.out.print("--------->TEMPERATURE("+ca3[0][0]+")--------->NO PLAY");
classify[row][column++]=ca3[0][0];
classify[row][column++]='N';
}
else
if(z==1)
{
System.out.print("--------->HUMIDITY("+ca3[0][1]+")--------->NO PLAY");
classify[row][column++]=ca3[0][1];
classify[row][column++]='N';
}
else
if(z==2)
{
System.out.print("--------->WINDY("+ca3[0][2]+")--------->NO PLAY");
classify[row][column++]=ca3[0][2];
classify[row][column++]='N';
}

/*System.out.println("The array containing ch and not play");
for(int i=0;i<9;++i)
{
for(int j=0;j<9;++j)
{
System.out.print(" "+ca3[i][j]);
}
System.out.println();
}
*/

}
public static void main(String args[])
{
Scanner scr=new Scanner(System.in);
HD=play*(Math.log(1/play)/Math.log(10))+nplay*(Math.log(1/nplay)/Math.log(10));
System.out.println("\nThe value of H(D) is "+HD);

tree sunny=new tree('S',1);
tree overcast=new tree('O',1);
tree rain=new tree('R',1);
tree hot=new tree('B',2); 
tree mild=new tree('M',2);
tree cool=new tree('C',2);
tree high=new tree('H',3); 
tree normal=new tree('N',3);
tree tru=new tree('T',4);
tree fal=new tree('F',4);

sunny=cal_hd(sunny,1);
overcast=cal_hd(overcast,1);
rain=cal_hd(rain,1);
hot=cal_hd(hot,2);
mild=cal_hd(mild,2);
cool=cal_hd(cool,2);
high=cal_hd(high,3);
normal=cal_hd(normal,3);
tru=cal_hd(tru,4);
fal=cal_hd(fal,4);

G1=HD-(sunny.p*sunny.hd+overcast.p*overcast.hd+rain.p*rain.hd);
G2=HD-(hot.p*hot.hd+mild.p*mild.hd+cool.p*cool.hd);
G3=HD-(high.p*high.hd+normal.p*normal.hd);
G4=HD-(tru.p*tru.hd+fal.p*fal.hd);

int gflag=0;

System.out.println("\nGain(D,Outlook)= "+G1 +"\nGain(D,Temperature)= "+G2+"\nGain(D,Humidity)= "+G3+"\nGain(D,Windy)= "+G4);
System.out.print("\nThe Splitting factor is ");
if(G1>G2 && G1>G3 && G1>G4)
System.out.println("Outlook");
else
if(G2>G1 && G2>G3 && G2>G4)
System.out.println("Temperature");
else
if(G3>G2 && G3>G1 && G3>G4)
System.out.println("Humidity");
else
if(G4>G2 && G4>G3 && G4>G1)
System.out.println("Windy");

System.out.println("\nThe Tree is as follows:-");
System.out.print("\nOUTLOOK(S)");
compute('S');
++row;
column=0;
System.out.print("\n\n\nOUTLOOK(O)");
compute('O');
++row;
column=0;
System.out.print("\n\n\nOUTLOOK(R)");
compute('R');

char input[]=new char[4];
String s; 

System.out.println("\nMenu:\n\nOutlook: Sunny=S Overcast=O Rainy=R\n\nTemperature: Hot=B Medium=M Cool=C\n\nHumidity: High=H Normal=N\n\nWindy: True=T False=F");

System.out.println("\n\nEnter your new tuple to be classified ");
System.out.print("\nOutlook(S/O/R)= ");
s=scr.nextLine();
input[0]=s.charAt(0);
System.out.print("\nTemperature(B/M/C)= ");
s=scr.nextLine();
input[1]=s.charAt(0);
System.out.print("\nHumidity(H/N)= ");
s=scr.nextLine();
input[2]=s.charAt(0);
System.out.print("\nWindy(T/F)= ");
s=scr.nextLine();
input[3]=s.charAt(0);

/* Display classify
for(int i=0;i<9;++i)
{
for(int j=0;j<9;++j)
{
System.out.print(" "+classify[i][j]);
}
System.out.println();
}
*/
System.out.print("Your input is ");
for(int i=0;i<4;++i)
System.out.print(" "+input[i]);
int inc1=0;
do
{
if(input[0]==classify[inc1][0])
{
if(classify[inc1][1]=='P')
   {
    System.out.println("\n\nTuple classified as PLAY");
    break;
   }
else
if(input[1]==classify[inc1][1] || input[2]==classify[inc1][1] || input[3]==classify[inc1][1])
{
   if(classify[inc1][2]=='P')
   {
   System.out.println("\n\nTuple classified as PLAY");
   break;
   }
   else
   if(classify[inc1][2]=='N')
   {
   System.out.println("\n\nTuple classified as NO PLAY");
   break;
   }
}
}
++inc1;
}
while(true);
}
}



APRIORI:

import java.io.*;
class Apriori
{
public static void main(String []arg)throws IOException
{
int i,j,m=0;
int t1=0;
BufferedReader b=new BufferedReader(new InputStreamReader(System.in));
System.out.println("Enter the number of transaction :");
int n=Integer.parseInt(b.readLine());
System.out.println("items :1--Milk 2--Bread 3--Coffee 4--Juice 5--Cookies 6--Jam");
int item[][]=new int[n][6];
for(i=0;i<n;i++)
for(j=0;j<6;j++)
item[i][j]=0;
String[] itemlist={"MILK","BREAD","COFFEE","JUICE","COOKIES","JAM"};
int nt[]=new int[6];
int q[]=new int[6];
for(i=0;i<n;i++)
{ System.out.println("Transaction "+(i+1)+" :");
for(j=0;j<6;j++)
{ //System.out.println(itemlist[j]);
System.out.println("Is Item "+itemlist[j]+" present in this transaction(1/0)? :");
item[i][j]=Integer.parseInt(b.readLine());
}
}
for(j=0;j<6;j++)
{ for(i=0;i<n;i++)
{if(item[i][j]==1)
nt[j]=nt[j]+1;
}
System.out.println("Number of Item "+itemlist[j]+" :"+nt[j]);
}
for(j=0;j<6;j++)
{ if(((nt[j]/(float)n)*100)>=50)
q[j]=1;
else
q[j]=0;
if(q[j]==1)
{t1++;
System.out.println("Item "+itemlist[j]+" is selected ");
}
}
for(j=0;j<6;j++)
{ for(i=0;i<n;i++)
{
if(q[j]==0)
{
item[i][j]=0;

}
}
}
int nt1[][]=new int[6][6];
for(j=0;j<6;j++)
{ for(m=j+1;m<6;m++)
{ for(i=0;i<n;i++)
{ if(item[i][j]==1 &&item[i][m]==1)
{ nt1[j][m]=nt1[j][m]+1;
}
}
if(nt1[j][m]!=0)
System.out.println("Number of Items of "+itemlist[j]+"& "+itemlist[m]+" :"+nt1[j][m]);
}
}
for(j=0;j<6;j++)
{ for(m=j+1;m<6;m++)
{
if(((nt1[j][m]/(float)n)*100)>=50)
q[j]=1;
else
q[j]=0;
if(q[j]==1)
{
System.out.println("Item "+itemlist[j]+"& "+itemlist[m]+" is selected ");
}
}
}
}
}

output:

comp@22D50118:~/Desktop$ java Apriori
Enter the number of transaction :
3
items :1--Milk 2--Bread 3--Coffee 4--Juice 5--Cookies 6--Jam
Transaction 1 :
Is Item MILK present in this transaction(1/0)? :
1
Is Item BREAD present in this transaction(1/0)? :
1
Is Item COFFEE present in this transaction(1/0)? :
1
Is Item JUICE present in this transaction(1/0)? :
0
Is Item COOKIES present in this transaction(1/0)? :
1
Is Item JAM present in this transaction(1/0)? :
0
Transaction 2 :
Is Item MILK present in this transaction(1/0)? :
0
Is Item BREAD present in this transaction(1/0)? :
1
Is Item COFFEE present in this transaction(1/0)? :
0
Is Item JUICE present in this transaction(1/0)? :
1
Is Item COOKIES present in this transaction(1/0)? :
0
Is Item JAM present in this transaction(1/0)? :
1
Transaction 3 :
Is Item MILK present in this transaction(1/0)? :
0
Is Item BREAD present in this transaction(1/0)? :
1
Is Item COFFEE present in this transaction(1/0)? :
1
Is Item JUICE present in this transaction(1comp@22D50118:~/Desktop$ java Apriori
Enter the number of transaction :
3
items :1--Milk 2--Bread 3--Coffee 4--Juice 5--Cookies 6--Jam
Transaction 1 :
Is Item MILK present in this transaction(1/0)? :
1
Is Item BREAD present in this transaction(1/0)? :
1
Is Item COFFEE present in this transaction(1/0)? :
1
Is Item JUICE present in this transaction(1/0)? :
0
Is Item COOKIES present in this transaction(1/0)? :
1
Is Item JAM present in this transaction(1/0)? :
0
Transaction 2 :
Is Item MILK present in this transaction(1/0)? :
0
Is Item BREAD present in this transaction(1/0)? :
1
Is Item COFFEE present in this transaction(1/0)? :
0
Is Item JUICE present in this transaction(1/0)? :
1
Is Item COOKIES present in this transaction(1/0)? :
0
Is Item JAM present in this transaction(1/0)? :
1
Transaction 3 :
Is Item MILK present in this transaction(1/0)? :
0
Is Item BREAD present in this transaction(1/0)? :
1
Is Item COFFEE present in this transaction(1/0)? :
1
Is Item JUICE present in this transaction(1/0)? :
1
Is Item COOKIES present in this transaction(1/0)? :
1
Is Item JAM present in this transaction(1/0)? :
1
Number of Item MILK :1
Number of Item BREAD :3
Number of Item COFFEE :2
Number of Item JUICE :2
Number of Item COOKIES :2
Number of Item JAM :2
Item BREAD is selected
Item COFFEE is selected
Item JUICE is selected
Item COOKIES is selected
Item JAM is selected
Number of Items of BREAD& COFFEE :2
Number of Items of BREAD& JUICE :2
Number of Items of BREAD& COOKIES :2
Number of Items of BREAD& JAM :2
Number of Items of COFFEE& JUICE :1



KMEANS:

import math

print("\n")
print("let first column be its name of your data.(include in number of column)")
num_column_data=input("enter number of columns in your dataset:")
num_rows_data=input("enter number of rows(tuples) in your dataset:")
data=[]
for i in range(0,num_rows_data):
	data.append([])
	for j in range(0,num_column_data+1):
		data[i].append([])
		if j==0:
			data[i][j]=raw_input("Enter name of your data of "+str(i+1)+"tuples:")
		else:
			data[i][j]=input("Enter data at "+str(j)+":")
k=input("enter k (number of custers) :")

if num_column_data==0 or num_rows_data==0:
	data=[["d1",185,72],["d2",170,56],["d3",168,60],["d4",179,68],["d5",182,72],["d6",188,77],["d7",180,71],["d8",180,70],["d9",183,84],["d10",180,88],["d11",180,88],["d12",180,67],["d13",177,76]]

def euclideanDistance(array,mean):
	sosquare=0
	for i in range(1,len(array)):
		sosquare=sosquare+((array[i]-mean[1][i])**2)
	return [mean[0],math.sqrt(sosquare)]


def minimum(array):
	if len(array)>1:
		pos=array[0][0]
		min=array[0][1]
		for i in range(1,len(array)):
			if array[i][1]<min:
				pos=array[i][0]
				min=array[i][1]
		return [pos,min]
	else:
		return array[0]


def initmean(data,k):
	marray=[]
	for i in range(0,k):
		marray.append([i,data[i]])
	return marray


def updateCentoid(cen,pos,data):
	newcen=[float(0) for i in range(len(data))]
	for i in range(1,len(data)):
		newcen[i]=(cen[pos][1][i]+float(data[i]))/2
	return newcen
			

def kmean(data,k):
	array=[]
	centroid=initmean(data,k)
	oldcentoid=[]
	j=0
	while oldcentoid!=centroid:	
		j=j+1
		oldcentoid=centroid[:]
		cluster=[]  
		for l in range(0,k):
			cluster.append([])

		for i in range(len(data)):
			eu_dis=[]	
			for l in range(0,k):
				eu_dis.append(euclideanDistance(data[i],centroid[l]))
			centroid[minimum(eu_dis)[0]]=[minimum(eu_dis)[0],updateCentoid(centroid,minimum(eu_dis)[0],data[i])]			
			cluster[minimum(eu_dis)[0]].append(data[i])
	for i in range(0,k):
		print(str(i+1)+" cluster is "+str(cluster[i]))


kmean(data,k)



LINEAR REGRESSION:

import statistics
n = int(input(&quot;Enter the no. of inputs: &quot;))
x = []
y = []
for i in range(0,n):
xi = int(input(&quot;Enter x%d: &quot; % (i+1)))
yi = int(input(&quot;Enter y%d: &quot; % (i+1)))
x.append(xi)
y.append(yi)
xmean = statistics.mean(x)
ymean = statistics.mean(y)
xx = []
yy = []
xx2 = []
xy = []
for i in range(0,n):
a = x[i] - xmean
b = y[i] - ymean
c = a ** 2
d = a * b
xx.append(a)
yy.append(b)
xx2.append(c)
xy.append(d)
b1 = sum(xy)/sum(xx2)
b0 = ymean - b1 * xmean
xpred = int(input(&quot;Enter value of x for which y is to be predicted: &quot;))
ypred = b0 + b1*xpred
print(&quot;Prediction is: %.2f&quot; % (ypred))

OUTPUT:
comp@c502:~/Desktop $ python3 reg.py
Enter the no. of inputs: 5
Enter x1: 95
Enter y1: 85
Enter x2: 85
Enter y2: 95
Enter x3: 80
Enter y3: 70
Enter x4: 70
Enter y4: 65
Enter x5: 60
Enter y5: 70
Enter value of x for which y is to be predicted: 80
Prediction is: 78.29



#include<stdio.h>
#include<math.h>
void main()
{
 int n,I;
 float sumx, sumxsq, sumy, sumxy, x, y, a0, a1, denom;
 printf("enter the n value");
 scanf("%d", &n);
 sumx = 0;
 sumxsq = 0;
 sumy = 0;
 sumxy = 0;
 for(int i=0; i<n; i++)
 {
  scanf("%f %f", &x, &y);
  sumx += x;
  sumxsq += pow(x, 2);
  sumy += y;
  sumxy += x * y;
 }
 denom = n*sumxsq-pow(sumx, 2);
 a0 = (sumy*sumxsq-sumx*sumxy) / denom;
 a1 = (n*sumxy-sumx*sumy) / denom;
 printf("y = %fx + %f",a1, a0);
}


HITS:

#include<stdio.h>
#include<math.h>
#include<stdlib.h>
void main()
{int i,j,k,n,a,it,t,count;
float sum=0,sum1=0,s=0,s1=0;
float v,u;
//To get input
printf("\nEnter the number of nodes: ");
scanf("%d",&n);
float ip[n][n],out[n],in[n],ipt[n][n],multiply[n][n],multiply1[n][n];
printf("\nEnter the links. If there is a node from A -> B: enter 1.");
for(i=0;i<n;i++)
{a=65;
for(j=0;j<n;j++)
{printf("\n%c->%c: ",a+i,a+j);
scanf("%f",&ip[i][j]);}}
float iden[4][1]={1,1,1,1};
//To print the input
a=65;
printf("\t");
for(j=0;j<n;j++)
{printf("%c\t",a+j);}
for(i=0;i<n;i++)
{a=65;
printf("\n%c",a+i);
for(k=0;k<n;k++)
{printf("\t%.2f",ip[i][k]);}}
//to calculate ip transpose
for(i=0;i<n;i++)
{for(j=0;j<n;j++)
{ipt[i][j]=ip[j][i];}}
//To ask the number of iterations
printf("\nEnter the number of iterations desired: ");
scanf("%d",&it);
k=1;
while(k<=it)
{//To calculate indegree and outdegree
for(i=0;i<n;i++)
{out[i]=0;
in[i]=0;
for(j=0;j<n;j++)

{if(ip[i][j]==1)
{out[i]++;}
if(ip[j][i]==1)
{in[i]++;}
}}
k++;
//Calculate V, U
for (i = 0; i < n; i++) {
for (j = 0; j < 1; j++) {
for (t = 0; t < n; t++) {
sum = sum + ipt[i][t]*iden[t][j];}
multiply[i][j] = sum;
sum = 0;}}
for (i = 0; i < n; i++) {
for (j = 0; j < 1; j++) {
for (t = 0; t < n; t++) {
sum1= sum1 + ip[i][t]*multiply[t][j];}
multiply1[i][j] = sum1;
sum1 = 0 } }
//To calculate new authority and hub
for(i=0;i<n;i++)
{for(j=0;j<1;j++)
{s=s+(multiply[i][j]*multiply[i][j]);
s1=s1+(multiply1[i][j]*multiply1[i][j]);
}}
printf("\nNew Hub: ");
for(i=0;i<n;i++)
{for(j=0;j<1;j++)
{multiply[i][j]=multiply[i][j]/sqrt(s);
printf("\n%c=%.2f",65+i,multiply[i][j]);
}}
printf("\nNew Auhtority:");
for(i=0;i<n;i++)
{for(j=0;j<1;j++)
{multiply1[i][j]=multiply1[i][j]/sqrt(s1);
printf("\n%c=%.2f",65+i,multiply1[i][j]);}}}}

OUTPUT:
Enter the number of nodes: 4
Enter the links. If there is a node from A -> B: enter 1.
A->A: 0
A->B: 1
A->C: 1
A->D: 1
B->A: 0
B->B: 0
B->C: 1
B->D: 1
C->A: 1
C->B: 0
C->C: 0
C->D: 1
D->A: 0
D->B: 0
D->C: 0
D->D: 1
Input Matrix is:
A B C D
A 0.00 1.00 1.00 1.00
B 0.00 0.00 1.00 1.00
C 1.00 0.00 0.00 1.00
D 0.00 0.00 0.00 1.00
Enter the number of iterations desired: 1
New Hub:
A=0.21
B=0.21
C=0.43
D=0.85
New Authority:
A=0.62
B=0.53
C=0.45
D=0.36


PAGE RANK:

import java.util.*;
import java.io.*;
public class PageRank {
 
public int path[][] = new int[10][10];
public double pagerank[] = new double[10];
 
public void calc(double totalNodes){
    
double InitialPageRank;
double OutgoingLinks=0;
double DampingFactor = 0.85;
double TempPageRank[] = new double[10];

int ExternalNodeNumber;
int InternalNodeNumber;
int k=1; // For Traversing
int ITERATION_STEP=1;

InitialPageRank = 1/totalNodes;
System.out.printf(" Total Number of Nodes :"+totalNodes+"\t Initial PageRank  of All Nodes :"+InitialPageRank+"\n");
 
// 0th ITERATION  _ OR _ INITIALIZATION PHASE
for(k=1;k<=totalNodes;k++)
{
  this.pagerank[k]=InitialPageRank;
}   
 
System.out.printf("\n Initial PageRank Values , 0th Step \n");
for(k=1;k<=totalNodes;k++)
{
  System.out.printf(" Page Rank of "+k+" is :\t"+this.pagerank[k]+"\n");
}  
 
 while(ITERATION_STEP<=2) // Iterations
 {
   // Store the PageRank for All Nodes in Temporary Array
  for(k=1;k<=totalNodes;k++)
 {  
   TempPageRank[k]=this.pagerank[k];
   this.pagerank[k]=0;
  }
    
 for(InternalNodeNumber=1;InternalNodeNumber<=totalNodes;InternalNodeNumber++)
 {
  for(ExternalNodeNumber=1;ExternalNodeNumber<=totalNodes;ExternalNodeNumber++)
   {
    if(this.path[ExternalNodeNumber][InternalNodeNumber] == 1)
    {
      k=1;
      OutgoingLinks=0;  // Count the Number of Outgoing Links for each ExternalNodeNumber
      while(k<=totalNodes)
      {
        if(this.path[ExternalNodeNumber][k] == 1 )
        {
          OutgoingLinks=OutgoingLinks+1; // Counter for Outgoing Links
        }  
        k=k+1;  
      }
         // Calculate PageRank     
         this.pagerank[InternalNodeNumber]+=TempPageRank[ExternalNodeNumber]*(1/OutgoingLinks);    
     }
   }  
 }    
     
     System.out.printf("\n After "+ITERATION_STEP+"th Step \n");
 
     for(k=1;k<=totalNodes;k++)
      System.out.printf(" Page Rank of "+k+" is :\t"+this.pagerank[k]+"\n");
 
     ITERATION_STEP = ITERATION_STEP+1;
}

// Add the Damping Factor to PageRank
for(k=1;k<=totalNodes;k++)
{
  this.pagerank[k]=(1-DampingFactor)+ DampingFactor*this.pagerank[k];
  }
 
// Display PageRank
System.out.printf("\n Final Page Rank : \n");
for(k=1;k<=totalNodes;k++)
{
 System.out.printf(" Page Rank of "+k+" is :\t"+this.pagerank[k]+"\n");
  }
 
 }

 public static void main(String args[])
    {
        int nodes,i,j,cost;
        Scanner in = new Scanner(System.in);
        System.out.println("Enter the Number of WebPages \n");
        nodes = in.nextInt();
        PageRank p = new PageRank();
        System.out.println("Enter the Adjacency Matrix with 1->PATH & 0->NO PATH Between two WebPages: \n");
        for(i=1;i<=nodes;i++)
          for(j=1;j<=nodes;j++)
          {
            p.path[i][j]=in.nextInt();
            if(j==i)
              p.path[i][j]=0;
          }
        p.calc(nodes);
   
          
    }   

}

OUTPUT:
comp@22D50106:~$ java PageRank
Enter the Number of WebPages

3
Enter the Adjacency Matrix with 1->PATH & 0->NO PATH Between two WebPages:

1 0 0
1 1 0
1 0 1
 Total Number of Nodes :3.0     Initial PageRank  of All Nodes :0.3333333333333333




